import { ResolverOptions, DIDResolutionResult, ResolverRegistry, Resolver } from 'did-resolver';
import { JWE } from 'did-jwt';
import { Cacao, Verifiers } from '@didtools/cacao';
import type { DagJWS, DIDProvider } from './types.js';
export declare type AuthenticateOptions = {
    provider?: DIDProvider;
    aud?: string;
    paths?: Array<string>;
};
export declare type AuthenticateParams = {
    nonce: string;
    aud?: string;
    paths?: Array<string>;
};
export declare type AuthenticateResponse = AuthenticateParams & {
    did: string;
    exp: number;
};
export declare type CreateJWSOptions = {
    did?: string;
    protected?: Record<string, any>;
    linkedBlock?: string;
};
export declare type VerifyJWSOptions = {
    /**
     * JS timestamp when the signature was allegedly made. `undefined` means _now_.
     */
    atTime?: Date;
    /**
     * If true, timestamp checking is disabled.
     */
    disableTimecheck?: boolean;
    /**
     * DID that issued the signature.
     */
    issuer?: string;
    /**
     * Cacao OCAP to verify the JWS with.
     */
    capability?: Cacao;
    /**
     * Number of seconds that a revoked key stays valid for after it was revoked
     */
    revocationPhaseOutSecs?: number;
    /**
     *  verifiers - object of supported verification methods to verify given cacao
     */
    verifiers?: Verifiers;
};
export declare type VerifyJWSResult = {
    kid: string;
    payload?: Record<string, any>;
    didResolutionResult: DIDResolutionResult;
};
export declare type CreateJWEOptions = {
    protectedHeader?: Record<string, any>;
    aad?: Uint8Array;
};
export declare type DecryptJWEOptions = {
    did?: string;
};
export declare type DecryptJWEResult = {
    cleartext: string;
};
export declare type DagJWSResult = {
    jws: DagJWS;
    linkedBlock: Uint8Array;
    cacaoBlock?: Uint8Array;
};
export declare type DIDOptions = {
    provider?: DIDProvider;
    resolver?: Resolver | ResolverRegistry;
    resolverOptions?: ResolverOptions;
    capability?: Cacao;
    parent?: string;
};
/**
 * Interact with DIDs.
 */
export declare class DID {
    private _client?;
    private _id?;
    private _resolver;
    private _capability?;
    private _parentId?;
    constructor({ provider, resolver, resolverOptions, capability, parent }?: DIDOptions);
    /**
     *  Get attached capability
     */
    get capability(): Cacao;
    /**
     * Check if the DID has a capability attached
     */
    get hasCapability(): boolean;
    /**
     * Get parent DID, parent DID is the capability issuer
     */
    get parent(): string;
    /**
     * Check if DID has parent DID
     */
    get hasParent(): boolean;
    /**
     * Get the DID identifier of the user.
     */
    get id(): string;
    /**
     * Check if user is authenticated.
     */
    get authenticated(): boolean;
    /**
     * Attach a capability to the DID instance
     * @param cap The capability to attach
     * @returns A new DID instance with the capability attached
     */
    withCapability(cap: Cacao): DID;
    /**
     * Set the DID provider of this instance.
     * Only callable if provider not already set.
     *
     * @param provider    The DIDProvider to use
     */
    setProvider(provider: DIDProvider): void;
    /**
     * Set the DID-resolver user by this instance
     *
     * @param resolver            Either a Resolver instance or an object with specific resolvers
     * @param resolverOptions     Options to use for the created resolver. Will be ignored if a Resolver instance is passed
     */
    setResolver(resolver: Resolver | ResolverRegistry, resolverOptions?: ResolverOptions): void;
    /**
     * Authenticate the user.
     */
    authenticate({ provider, paths, aud }?: AuthenticateOptions): Promise<string>;
    /**
     * Create a JWS encoded signature over the given payload.
     * Will be signed by the currently authenticated DID.
     *
     * @param payload             The payload to sign
     * @param options             Optional parameters
     */
    createJWS<T extends string | Record<string, any>>(payload: T, options?: CreateJWSOptions): Promise<DagJWS>;
    /**
     * Create an IPFS compatibe DagJWS encoded signature over the given payload.
     * Will be signed by the currently authenticated DID.
     *
     * @param payload             The payload to sign, may include ipld links
     * @param options             Optional parameters
     */
    createDagJWS(payload: Record<string, any>, options?: CreateJWSOptions): Promise<DagJWSResult>;
    /**
     * Verify a JWS. Uses the 'kid' in the header as the way to resolve
     * the author public key.
     *
     * @param jws                 The JWS to verify
     * @param options             Optional arguments for verification
     * @returns                   Information about the signed JWS
     */
    verifyJWS(jws: string | DagJWS, options?: VerifyJWSOptions): Promise<VerifyJWSResult>;
    /**
     * Create a JWE encrypted to the given recipients.
     *
     * @param cleartext           The cleartext to be encrypted
     * @param recipients          An array of DIDs
     * @param options             Optional parameters
     */
    createJWE(cleartext: Uint8Array, recipients: Array<string>, options?: CreateJWEOptions): Promise<JWE>;
    /**
     * Create an IPFS compatibe DagJWE encrypted to the given recipients.
     *
     * @param cleartext           The cleartext to be encrypted, may include ipld links
     * @param recipients          An array of DIDs
     * @param options             Optional parameters
     */
    createDagJWE(cleartext: Record<string, any>, recipients: Array<string>, options?: CreateJWEOptions): Promise<JWE>;
    /**
     * Try to decrypt the given JWE with the currently authenticated user.
     *
     * @param jwe                 The JWE to decrypt
     * @param options             Optional parameters
     */
    decryptJWE(jwe: JWE, options?: DecryptJWEOptions): Promise<Uint8Array>;
    /**
     * Try to decrypt the given DagJWE with the currently authenticated user.
     *
     * @param jwe                 The JWE to decrypt
     * @returns                   An ipld object
     */
    decryptDagJWE(jwe: JWE): Promise<Record<string, any>>;
    /**
     * Resolve the DID Document of the given DID.
     *
     * @param didUrl              The DID to resolve
     */
    resolve(didUrl: string): Promise<DIDResolutionResult>;
}
