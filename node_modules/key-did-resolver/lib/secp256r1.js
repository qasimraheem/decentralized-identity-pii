import * as u8a from 'uint8arrays';
import * as nist_weierstrauss from 'nist-weierstrauss';
export function keyToDidDoc(pubKeyBytes, fingerprint) {
    const did = `did:key:${fingerprint}`;
    const keyId = `${did}#${fingerprint}`;
    const key = pubKeyBytesToXY(pubKeyBytes);
    return {
        id: did,
        verificationMethod: [
            {
                id: keyId,
                type: 'JsonWebKey2020',
                controller: did,
                publicKeyJwk: {
                    kty: 'EC',
                    crv: 'P-256',
                    x: key.xm,
                    y: key.ym,
                },
            },
        ],
        authentication: [keyId],
        assertionMethod: [keyId],
        capabilityDelegation: [keyId],
        capabilityInvocation: [keyId],
    };
}
export function pubKeyBytesToXY(pubKeyBytes) {
    if (!nist_weierstrauss.nist_weierstrauss_common.testUint8Array(pubKeyBytes)) {
        throw new TypeError('input must be a Uint8Array');
    }
    const publicKeyHex = nist_weierstrauss.nist_weierstrauss_common.pubKeyBytesToHex(pubKeyBytes);
    const bytesCount = publicKeyHex.length / 2;
    if (bytesCount == 64) {
        return nist_weierstrauss.nist_weierstrauss_common.publicKeyToXY(publicKeyHex);
    }
    if (bytesCount == 65) {
        if (publicKeyHex.slice(0, 2) == '04') {
            const publicKey = publicKeyHex.slice(2);
            return nist_weierstrauss.nist_weierstrauss_common.publicKeyToXY(publicKey);
        }
    }
    if (bytesCount == 33) {
        if (publicKeyHex.slice(0, 2) == '03' || publicKeyHex.slice(0, 2) == '02') {
            const publicKey = u8a.fromString(publicKeyHex, 'base16');
            const point = nist_weierstrauss.secp256r1.ECPointDecompress(publicKey);
            return nist_weierstrauss.nist_weierstrauss_common.publicKeyIntToXY(point);
        }
    }
    throw new Error('Unexpected pubKeyBytes');
}
//# sourceMappingURL=secp256r1.js.map